// hello world 

// hay first we need to install the npx

// then create the npm expo app

npx create-expo-app@latest Instagram-clone --template

// then here we need to choose what type of templet you want to choose for developing this app
// here we choose

blank-templet

// then check whether you node versin is up to date or not
// if it is not then google it to update the new latest node


/// after install alll the things 
// then to start the comand we use

npm start


// after starting we need some depandence like 
//first we are going to install is:

npx expo install react-native-web react-dom @expo/metro-runtime

// after that:

npx expo install expo-router react-native-safe-area-co
ntext rea
ct-native-screens expo-linking expo-constants expo-status-bar


// then install:
  npx expo install react-native-web react-dom




//// ------------ now we need to do some configuration
// go to the package.json
// then convert the main 

{

 "main": "expo-router/entry",

}


/// --------- then do some changes into app.json
// here we need to add the schema and the value to this schema is user wish

{
  "expo": {
    "name": "Instagram-Clone",
    "slug": "Instagram-Clone",
    "schema": "xtempo",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    }


    

    ///----- now we need to add some config in the app.json
    //this is before
{
  "web": {
      "favicon": "./assets/favicon.png"
      
    },
}



    //this is after changes

    {
          "web": {
      "favicon": "./assets/favicon.png",
      "bundler": "metro"
      
    },
    },



/// now to fix all the dependences are install then we are refreshing
// then packages we are using

npm start -- -c






//////////////+++++++++++++ now are are going to create the work

// first create the src folder to kept our all code in one place


// after creating the src folder 


// then in that src we have to folder app and components

// and in app folder we create index.tsx in it
// this index.tsx have the home screen property in it

import { Link } from "expo-router";
import { View, Text } from "react-native";

export default function Home(){

    return (
        // this is link work
        // <Link href="/about"> go to About us</Link>


        <Text>Hello Welcome to the Next  Generation Ai</Text>

    )
}


// now we are creating the _layout.tsx file for rendering the layout 
// of the index.tsx

import { Slot } from "expo-router"
import { Text } from "react-native"

export default function RootLayout(){
    return <Text> </Text>;
}


/// //+++++++++++ how to use Slot
// in here if we use Slot we can render the index.tsx Text line 
// (Hello Welcome to the Next  Generation Ai)
import { Slot } from "expo-router"
import { Text } from "react-native"

export default function RootLayout(){
    return <Slot />;
}


//// ---------- how to use Stack 
// and if we use Stack then we render the index.tsx Text line
// and its file name index on the navigation bar

import { Slot, Stack } from "expo-router"
import { Text } from "react-native"

export default function RootLayout(){
    return <Stack />;
}



////------------ how to use Tabs
// if we use Tabe we get the tabs button for moving in different layouts
// layout like index to about and bout to index

import { Slot , Stack, Tabs } from "expo-router"
import { Text } from "react-native"

export default function RootLayout(){
    return <Tabs />
}




/////////////+++++++++++++++++ after that we are going to create the 
/// folder for different layouts by using paranthesis ()

eg:

(tabs)

// by creating the folder in the paranthesis helps in grouping
// the differnent layout in single layout and this folder 
// would not effect the other layout outside this folder




/////+++++++++++++++++++ now in outside index.tsx
// we are using Redirect for representing the other file from the 
// () folder to the home screen or index.tsx file

import { Link, Redirect } from "expo-router";
import { View, Text } from "react-native";

export default function Home(){

    return (
        // this is link work
        // <Link href="/about"> go to About us</Link>
        <View>
        <Redirect href="/(tabs)"/>
        <Text>Hello Welcome to the Next  Generation Ai</Text>
        </View>
    )
}





////// ------------------ now go to _layout.tsx of the Tabs folder
// and ther we are going to place some icon on that screen and make a icon
// for on that screen and by using Tabs like this

import { Tabs } from "expo-router";

// here we import the home icon from the expo vector which gives icon to us
import { FontAwesome } from '@expo/vector-icons';



export default function TabsLayout(){

    return (
        <Tabs screenOptions={{ tabBarActiveTintColor: "blue"}}>
            <Tabs.Screen name = 'index' options={{ headerTitle: 'For You', tabBarIcon: ({color}) => <FontAwesome name="home" size={24} color={color} />}} />,
        </Tabs>
    )
}












/////// now in _layout.tsx we add some tabs properties

import { Slot, Tabs } from "expo-router";
import { FontAwesome } from '@expo/vector-icons';



export default function TabsLayout() {

    return (
        <Tabs screenOptions={{ tabBarActiveTintColor: "blue", tabBarShowLabel: false }}>

            <Tabs.Screen
                name='index'
                options={{
                    headerTitle: 'For You',
                    tabBarIcon: ({ color }) => (
                        <FontAwesome name="home" size={26} color={color} />
                    ),

                }}
            />,

            <Tabs.Screen
                name='new'
                options={{
                    headerTitle: 'Create post',
                    tabBarIcon: ({ color }) => (
                        <FontAwesome name="plus-square-o" size={26} color={color} />
                    ),
                }}
            />,

            {/* this is for profile tab screen */}

            <Tabs.Screen
                name='profile'
                options={{
                    headerTitle: 'Profile',
                    tabBarIcon: ({ color }) => (
                        <FontAwesome name="user" size={26} color={color} />
                    ),
                }}
            />,

            
        </Tabs>
    )
}










///// ++++++++++++++++++ for styling the layout we are using 
// tailwind css so for that we need to install tailwind css and 
// then we its setup




Expo Router
Installation

//// 1. Install NativeWind

You will need to install nativewind@^4.0.1 and it's peer dependencies tailwindcss and react-native-reanimated.

    npm
    yarn
    pnpm
    Expo

// below is for Expo
npx expo install nativewind@^4.0.1 react-native-reanimated tailwindcss


/// if you are using expo router then skip the pod-install 
//Run pod-install to install Reanimated pod:

npx pod-install


///2. Setup Tailwind CSS

Run npx tailwindcss init to create a tailwind.config.js file

Add the paths to all of your component files in your tailwind.config.js file.
tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  // NOTE: Update this to include the paths to all of your component files.
 
////////+++++ here we need to add and remove some property
// in places of app we have src source file having js, jsx, tsx 
// new one is  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  content: ["./app/**/*.{js,jsx,ts,tsx}"],
  presets: [require("nativewind/preset")],
  theme: {
    extend: {},
  },
  plugins: [],
}

Create a CSS file and add the Tailwind directives
global.css

@tailwind base;
@tailwind components;
@tailwind utilities;

info

From here onwards, replace ./global.css with the relative path to the CSS file you just created

////3. Add the Babel preset

    SDK 49
    SDK 50+

//////  we need to check our bable.config.js is it 50+ or 49
/// for that we need to go inside the package.json and inside

 "dependencies": {
    "@expo/metro-runtime": "~3.2.1",
    "expo": "~51.0.20",     /// her our expo version is 51.0
    "expo-router": "~3.5.18",
    "expo-status-bar": "~1.12.1",
    "nativewind": "^4.0.1",
    "rea": "^0.0.1",

so we need to configure according to 50+ version


babel.config.js

module.exports = function (api) {
  api.cache(true);
  return {
    presets: [
      ["babel-preset-expo", { jsxImportSource: "nativewind" }],
      "nativewind/babel",
    ],
    plugins: [
      // Required for expo-router
      "expo-router/babel",
      "react-native-reanimated/plugin",
    ]
  };
};


//// in bable we only need to past the presents: or plugins in the 
/// bable.comfig.js file bcs they are not present is the raw babel
/// so new babel will be

/// it is the new babel that we have configured by removing  
/// some unreliable components

module.exports = function(api) {
  api.cache(true);
  return {
    presets: [
      ["babel-preset-expo", { jsxImportSource: "nativewind" }],
      "nativewind/babel",
    ],
  };
};


/////4. Modify your metro.config.js

If your project does not have a metro.config.js run npx expo customize metro.config.js

    SDK 49
    SDK 50+

metro.config.js

const { getDefaultConfig } = require("expo/metro-config");
const { withNativeWind } = require('nativewind/metro');

const config = getDefaultConfig(__dirname, { isCSSEnabled: true })

module.exports = withNativeWind(config, { input: './global.css' })

5. Import your CSS file
app/_layout.js

import Slot from "expo-router/Slot";

// Import your global CSS file
import "../global.css"

export default Slot

6. TypeScript (optional)
Please follow the TypeScript guide.

Version: v4
Typescript

NativeWind extends the React Native types via declaration merging. The simplest method to include the types is to create a new nativewind-env.d.ts file and add a triple-slash directive referencing the types.

/// <reference types="nativewind/types" />







/////  now to use the css in layout 
/// we use like 


import { Text,View } from "react-native";


export default function FeedScreen() {

    return (

/// inside className we put our css styling
        <View className="bg-slate-600 flex-1 item-center justify-top m-10">
            <Text className="text-5xl font-light text-blue-500 text-center">Feed</Text>
        </View>
    )
}




//////// important point 
//// how to make responsive css styling using nativewind

/// by using md (mediam device) with colum(:) using this we can
/// create rensponsive web and app application

 <Text className="text-3xl md:text-5xl font-light text-blue-500 md:text-pink-500 text-center">Feed</Text>



 //////











 ++++++++++++++++ now we are going to import the data like user anem 
from posts.json inside the index.tsx
// after installing the json file for insternet than we nned to save that 
// json file in assets folder in that asset folder we have created another
// folder name data in that folder we have saveed that json file 
//
/// first we nned to import that post from the posts.json file
// 
import { Text,View } from "react-native";
import posts from "../../../assets/data/posts.json"


const post1 = posts[0];

export default function FeedScreen() {

    console.log(post1);
    return (

        <View className="bg-slate-600 flex-1 item-center justify-top m-10">
            <Text className="text-3xl md:text-5xl font-light text-blue-500 md:text-pink-500 text-center">Feed</Text>
        </View>
    )
}


///    2) way to import the posts.js
//// for make it more easy way to import is 
// first we need to go to tsconfig.json inside that tsconfig 
// we need to create the baseUrl and paths in that tsconfig.json 

\//before:
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
  }
}




// after
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["*"],
    }
  }
}

import { Text,View } from "react-native";
import posts from "~/assets/data/posts.json"


const post1 = posts[0];

export default function FeedScreen() {

    console.log(post1);
    return (

        <View className="bg-slate-600 flex-1 item-center justify-top m-10">
            <Text className="text-3xl md:text-5xl font-light text-blue-500 md:text-pink-500 text-center">Feed</Text>
        </View>
    )
}










//////////////////+++++++++++++ now we are implenting our design
//// inside the layout

/// for that first we are desiginig the image section in the index.tsx of (tabs)


//// for implementing the image we need to import the image from the react-Native

/// here we import the Image with other react-native components
import { Text,View,Image } from "react-native";
import posts from "~/assets/data/posts.json"



const post1 = posts[0];

export default function FeedScreen() {

    console.log(post1);
    return (

        <View className="">
        // here we are implementing the Image class in the View
        image class have source function for accessing the image source
            <Image  
            source={{ uri: post1.image_url}} 
            // here w (width)- is full  aspect(aspect-height ratio)- is 4/3
            className=" w-full aspect-[4/3] "/>
        </View>
    )
}


//////+++++++++++++++++++++ heading of the index.tsx

//// now we are desinging the usericon or user-profile image
// for that we are creating another view for the user-profile image
// then in that view we are using image class in it


const post1 = posts[0];

export default function FeedScreen() {

    console.log(post1);
    return (

        <View className="">
        /// here the user profile-image
            {/* Header of our post */}
            <View>
                <Image 
                source={{ uri: post1.user.image_url}}  className=" w-12 aspect-square rounded-full"/>
            </View>
            <Image
                source={{ uri: post1.image_url }}
                className=" w-full aspect-[4/3] " />
        </View>
    )
}





+++++++++++++++++++ header
//// now in heading we text for the username

////       {/* Header of our post */}
            <View 
            className="p-2 space-x-1 flex-row items-center gap-1">
                <Image 
                source={{ uri: post1.user.image_url}}  className=" w-12 aspect-square rounded-full"/>

                <Text className="font-semibold " > {post1.user.username} </Text>
            </View>

  








+++++++++++++++++ footer
//////// and in the footer we are adding the icon 
///// like heart, comment, message, share, bookmark, etc

   {/* icons like heart, comment, share */}
            <View className="flex-row gap-3">
                 <AntDesign  name="hearto" size={20}/>
                 <Ionicons name="chatbubble-outline" size={20}>
                 <Feather name="send" size={20}/>

                 <Feather name="bookmark" size={20} className="ml-auto"/>

            </View>





//////++++++++++++++++++ now index.tsx body is like 


 <View className="">
            {/* Header of our post */}
            <View 
            className="p-2 space-x-1 flex-row items-center gap-1">
                <Image 
                source={{ uri: post1.user.image_url}}  className=" w-12 aspect-square rounded-full"/>

                <Text className="font-semibold " > {post1.user.username} </Text>
            </View>

            {/* image or post of that profile */}
            <Image
                source={{ uri: post1.image_url }}
                className=" w-full aspect-[4/3] " />


            {/* icons like heart, comment, share */}
            <View className="flex-row gap-3">
                 <AntDesign  name="hearto" size={20}/>
                 <Ionicons name="chatbubble-outline" size={20}>
                 <Feather name="send" size={20}/>

                 <Feather name="bookmark" size={20} className="ml-auto"/>

            </View>
        </View>




///// now go to Components.txt 

















////////++++++++++++++++++++++

to render every data from the API we need to loop the API so we
make the whole list of data scrollable and able to see the data on
the screen



//// to do that we are importing the FlatList components from the react-native 
/// 
import { Text, View, Image , FlatList} from "react-native";
import posts from "~/assets/data/posts.json";
import {Ionicons, Feather, AntDesign} from '@expo/vector-icons';
import PostListItem from "~/src/components/PostListItem";




export default function FeedScreen() {

    
    return(
        <View>
            <PostListItem post={posts[3]}/>
            <PostListItem post={posts[2]}/>

        </View>
    );
}



//// now we are implementthe FlatList
// to do that we we need to comment the earlier return just like below

import { Text, View, Image , FlatList} from "react-native";
import posts from "~/assets/data/posts.json";
import {Ionicons, Feather, AntDesign} from '@expo/vector-icons';
import PostListItem from "~/src/components/PostListItem";


export default function FeedScreen() {

    return (

///  here we are using FlatList and it has two main component
///  1) data and 2) renderItem
        <FlatList 
            data={posts}   // data from the posts

            // and we are render the data from the posts
            // to render the item use use arrow function to 
            // perform the postListItem method and render the data
            /// and also assign the parameter  {item} using scope {}

            renderItem={({ item }) => <PostListItem post={item}/>}
        
        
        />
    )

    ///// this are commented below
    // return(
    //     <View>
    //         <PostListItem post={posts[3]}/>
    //         <PostListItem post={posts[2]}/>

    //     </View>
    // );
}





///// in the website mode we get whole data of post on the screen


//// and to add the space between the post we use 
contentContainerStyle in the FlatList

export default function FeedScreen() {

    return (

        <FlatList 
            data={posts}
            // here we use the contentContainerStyle for gap btw the post
            contentContainerStyle={{gap: 20}}
            renderItem={({ item }) => <PostListItem post={item}/>}
            showsVerticalScroolIndecator={false}   /// it is for vertical scroll
        />
    )








///// now to make it responsive in both mobile and web for our post
////  we have to give the max-width and then width to  contentContainerStyle


export default function FeedScreen() {

    return (

        <FlatList 
            data={posts}
            contentContainerStyle={{gap: 20, maxWidth: 512, alignSelf: 'center', width: '100%'}}
            renderItem={({ item }) => <PostListItem post={item}/>}
            showsVerticalScrollIndicator={false}
        />
    )

}


















--------------------------------------------------------------------------------------|
                                                                                      |
////////////+++++++++++++++++++ now we are desiging the new tab layout                |
                                                                                      |
--------------------------------------------------------------------------------------|





///// 1) in the new tab we are going to create user adding there post
//// before posting there post

///// 2) we are adding the change button for changing there post 


///// 3) makin the text box for adding the caption before posting there 
/////    post on the online

///// 4) create the button for posting the final post of the user
////     on the online




import { View, Text, Image, TextInput } from "react-native";


export default function CreatePost() {

    return (
        <View className="p-3 items-center m-4">
           /// for image space
            {/* Image picker from the user */}
            <Image source={{ uri: 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/images/1.jpg' }}
                className="w-60 aspect-[3/4] rounded-lg shadow-md m-4"
            />

            
            {/* add the change post button */}
            <Text onPress={() => {}} className="text-blue-500 font-semibold m-5">Change</Text>


            /// for input the text we need to import the TextInput 
            // from the react-native then paced is here
            {/* TextInput for the caption from the user */}
           <TextInput placeholder="What is on your mind?" className="bg-blue-500 m-3 w-full h-20 p-3 rounded-lg"/>


            {/* Button for sending the caption */}
        </View>

    )
}





///////////// now to access the user textinput we need to 
/////      import a class useState from the react

import { useState } from "react";

// then implement the method in it


import { View, Text, Image, TextInput } from "react-native";
import { useState } from "react";


export default function CreatePost() {

/// here we are using two variable for useState() method one is 
/// caption and another is setCaption,
/// then we need to implement the value attribute in the TextInput
//// like below in the TextInput (TextInput value={caption})
/// for getting the value of the text in caption variable 




//// if we write somthing in the useState method  useState('356ygbn')
/// then it always comes back on the TextInput field
    const [caption, setCaption] =useState('')

    return (
        <View className="p-3 items-center m-4">
            {/* Image picker from the user */}
            <Image source={{ uri: 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/images/1.jpg' }}
                className="w-60 aspect-[3/4] rounded-lg shadow-md m-4"
            />

            {/* add the change post button */}
            <Text onPress={() => {}} className="text-blue-500 font-semibold m-5">Change</Text>


            {/* TextInput for the caption from the user */}

            <TextInput value={caption} placeholder="What is on your mind?" className="bg-blue-500 m-3 w-full h-20 p-3 rounded-lg"/>

            {/* Button for sending the caption */}
        </View>

    )
}






//// to solve the user TextInput set problem we are 
//// implementing the onChangeText and creating the the 
//// arrow function having parameter newValue for accessing 
//// whatever we write in the TextInput will be stored in
//// parameter and then it will perform some action by 
//// setting the setCaption a paramater value newValue in it



onChangeText={(newValue) => setCaption(newValue)}

// it is a attribut in react-native

  return (
        <View className="p-3 items-center m-4">
            {/* Image picker from the user */}
            <Image source={{ uri: 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/images/1.jpg' }}
                className="w-60 aspect-[3/4] rounded-lg shadow-md m-4"
            />

            {/* add the change post button */}
            <Text onPress={() => {}} className="text-blue-500 font-semibold m-5">Change</Text>


            {/* TextInput for the caption from the user */}

            <TextInput 
               value={caption} 
=> here it is  onChangeText={(newValue) => setCaption(newValue)}
               placeholder="What is on your mind?" 
               className="bg-blue-500 m-3 w-full h-20 p-3 rounded-lg"/>

            {/* Button for sending the caption */}
        </View>

    )




//// now are creating the button for the use to send there post
///  for that we are using pressable components by importing 
///  Pressable from the react-native


import { View, Text, Image, TextInput, Pressable } from "react-native";


// then applying the pressable in the place of button

/// before that to make this button more useable we are going to 
/// creating a componts of the buttonin view

like this

            <View className="mt-auto w-full">  // mt (margin-top= auto)
                <Pressable className="bg-blue-500 items-center w-full h-10 p-3 rounded-md">
                    <Text className="text-white font-semibold">Share</Text>
                </Pressable>
            </View>

/// but it will not comes on bottom to do that we need to 
/// make our main <View> flex

<View className="p-3 items-center flex-1">


import { View, Text, Image, TextInput, Pressable } from "react-native";
import { useState } from "react";


export default function CreatePost() {

    const [caption, setCaption] = useState('')

    return (
=> here  <View className="p-3 items-center flex-1">
            {/* Image picker from the user */}
            <Image source={{ uri: 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/images/1.jpg' }}
                className="w-60 aspect-[3/4] rounded-lg shadow-md m-4"
            />

            {/* add the change post button */}
            <Text onPress={() => { }} className="text-blue-500 font-semibold m-5">Change</Text>



            {/* TextInput for the caption from the user */}
            <TextInput
                value={caption}
                onChangeText={(newValue) => setCaption(newValue)}
                placeholder="What is on your mind?"

  ==> here i have also change in hight of TextInput h-16 early height is h-20              
                className="bg-blue-500 m-3 w-full h-16 p-3 rounded-lg" />


            {/* Button for sending the caption */}

            <View className="mt-auto w-full">
                <Pressable className="bg-blue-500 items-center w-full h-10 p-3 rounded-md">
                    <Text className="text-white font-semibold">Share</Text>
                </Pressable>
            </View>

        </View>

    )
}